{"version":3,"file":"IPhysicalQueryPlanLogger.js","sourceRoot":"","sources":["IPhysicalQueryPlanLogger.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * A physical query plan logger collects operations, which can then be serialized as a query plan to JSON.\n */\nexport interface IPhysicalQueryPlanLogger {\n  /**\n   * Log an operation.\n   *\n   * Important here is that the `node` and `parentNode` can be of any type,\n   * as long as they properly reference each other in subsequent calls.\n   * These node references can be used to build up a hierarchy.\n   *\n   * @param logicalOperator The current logical query operator.\n   * @param physicalOperator The current physical query operator.\n   *                         This may be omitted if no physical operator applies.\n   * @param node The current operation node.\n   * @param parentNode The parent operation node.\n   * @param actor The current actor name.\n   * @param metadata Metadata to include together in the physical query plan output for this node.\n   */\n  logOperation: (\n    logicalOperator: string,\n    physicalOperator: string | undefined,\n    node: any,\n    parentNode: any,\n    actor: string,\n    metadata: any,\n  ) => void;\n\n  /**\n   * Remove all matching children from the given node,\n   * @param node The node to remove children from.\n   * @param filter The filter to keep children by. If undefined, all children will be removed.\n   */\n  stashChildren: (\n    node: any,\n    filter?: (planNodeFilter: IPlanNode) => boolean,\n  ) => void;\n\n  /**\n   * Add the given child to the given parent node.\n   * @param node A node to add to the parent.\n   * @param parentNode The parent to add to.\n   */\n  unstashChild: (\n    node: any,\n    parentNode: any,\n  ) => void;\n\n  /**\n   * Append the given metadata to the given node.\n   * @param node The node to add metadata to.\n   * @param metadata The metadata to add.\n   */\n  appendMetadata: (\n    node: any,\n    metadata: any,\n  ) => void;\n\n  /**\n   * Serialize the collected query plan to JSON.\n   */\n  toJson: () => any;\n}\n\nexport interface IPlanNode {\n  actor: string;\n  logicalOperator: string;\n  physicalOperator?: string;\n  rawNode: any;\n  children: IPlanNode[];\n  metadata: any;\n}\n"]}