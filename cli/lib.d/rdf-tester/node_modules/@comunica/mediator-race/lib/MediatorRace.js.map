{"version":3,"file":"MediatorRace.js","sourceRoot":"","sources":["MediatorRace.ts"],"names":[],"mappings":";;;AASA,yCAA0E;AAE1E;;GAEG;AACH,MAAa,YAOX,SAAQ,eAAwB;IAChC,YAAmB,IAAmC;QACpD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAES,WAAW,CAAC,MAAS,EAAE,WAA0C;QACzE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,MAAM,GAAa,EAAE,CAAC;YAC5B,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;gBACrC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;oBAC9B,IAAI,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC;wBACrB,OAAO,CAAC,IAAA,2BAAoB,EAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;oBACvE,CAAC;yBAAM,CAAC;wBACN,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;wBACpC,IAAI,MAAM,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE,CAAC;4BACzC,OAAO,CAAC,IAAA,eAAQ,EAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;wBAClE,CAAC;oBACH,CAAC;gBACH,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;oBACjB,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA/BD,oCA+BC","sourcesContent":["import type {\n  Actor,\n  IAction,\n  IActorOutput,\n  IActorReply,\n  IActorTest,\n  IMediatorArgs,\n  TestResult,\n} from '@comunica/core';\nimport { passTestWithSideData, failTest, Mediator } from '@comunica/core';\n\n/**\n * A mediator that picks the first actor that resolves its test.\n */\nexport class MediatorRace<\n  A extends Actor<I, T, O, TS>,\nI extends IAction,\nT extends IActorTest,\nO extends IActorOutput,\nTS = undefined,\n>\n  extends Mediator<A, I, T, O, TS> {\n  public constructor(args: IMediatorArgs<A, I, T, O, TS>) {\n    super(args);\n  }\n\n  protected mediateWith(action: I, testResults: IActorReply<A, I, T, O, TS>[]): Promise<TestResult<A, TS>> {\n    return new Promise((resolve, reject) => {\n      const errors: string[] = [];\n      for (const testResult of testResults) {\n        testResult.reply.then((reply) => {\n          if (reply.isPassed()) {\n            resolve(passTestWithSideData(testResult.actor, reply.getSideData()));\n          } else {\n            errors.push(reply.getFailMessage());\n            if (errors.length === testResults.length) {\n              resolve(failTest(this.constructFailureMessage(action, errors)));\n            }\n          }\n        }).catch((error) => {\n          reject(error);\n        });\n      }\n    });\n  }\n}\n"]}