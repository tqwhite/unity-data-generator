{"version":3,"file":"ActorRdfParseRdfXml.js","sourceRoot":"","sources":["ActorRdfParseRdfXml.ts"],"names":[],"mappings":";;;AACA,2DAAuE;AACvE,+DAA0D;AAE1D,qEAAuD;AAGvD;;GAEG;AACH,MAAa,mBAAoB,SAAQ,4CAA4B;IACnE;;;;;;;;OAQG;IACH,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAuB;QAC5C,MAAM,WAAW,GAAwB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QAC3F,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5D,MAAM,IAAI,GAAoB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,sCAAY,CAAC;YAC9D,WAAW;YACX,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,OAAO;SAClC,CAAC,CAAC,CAAC;QACJ,OAAO;YACL,IAAI;YACJ,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;SAC5B,CAAC;IACJ,CAAC;CACF;AA1BD,kDA0BC","sourcesContent":["import type { IActionRdfParse, IActorRdfParseFixedMediaTypesArgs, IActorRdfParseOutput } from '@comunica/bus-rdf-parse';\nimport { ActorRdfParseFixedMediaTypes } from '@comunica/bus-rdf-parse';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { ComunicaDataFactory } from '@comunica/types';\nimport { RdfXmlParser } from 'rdfxml-streaming-parser';\nimport type { Readable } from 'readable-stream';\n\n/**\n * A comunica RDF/XML RDF Parse Actor.\n */\nexport class ActorRdfParseRdfXml extends ActorRdfParseFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/rdf+xml\": 1.0\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/rdf+xml\": \"http://www.w3.org/ns/formats/RDF_XML\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorRdfParseFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async runHandle(action: IActionRdfParse): Promise<IActorRdfParseOutput> {\n    const dataFactory: ComunicaDataFactory = action.context.getSafe(KeysInitQuery.dataFactory);\n    action.data.on('error', error => data.emit('error', error));\n    const data = <Readable> <any> action.data.pipe(new RdfXmlParser({\n      dataFactory,\n      baseIRI: action.metadata?.baseIRI,\n    }));\n    return {\n      data,\n      metadata: { triples: true },\n    };\n  }\n}\n"]}