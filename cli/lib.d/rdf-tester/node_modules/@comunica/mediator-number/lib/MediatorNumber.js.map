{"version":3,"file":"MediatorNumber.js","sourceRoot":"","sources":["MediatorNumber.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  Actor,\n  IAction,\n  IActorOutput,\n  IActorReply,\n  IActorTest,\n  IMediatorArgs,\n  TestResult,\n} from '@comunica/core';\nimport { passTestWithSideData, failTest, Mediator } from '@comunica/core';\n\n/**\n * A mediator that can mediate over a single number field.\n *\n * It takes the required 'field' and 'type' parameters.\n * The 'field' parameter represents the field name of the test result field over which must be mediated.\n * The 'type' parameter\n */\nexport class MediatorNumber<\n  A extends Actor<I, T, O, TS>,\nI extends IAction,\nT extends IActorTest,\nO extends IActorOutput,\nTS,\n>\n  extends Mediator<A, I, T, O, TS> implements IMediatorNumberArgs<A, I, T, O, TS> {\n  public readonly field: string;\n  public readonly type: 'min' | 'max';\n  public readonly ignoreFailures: boolean;\n  public readonly indexPicker: (tests: T[]) => number;\n\n  public constructor(args: IMediatorNumberArgs<A, I, T, O, TS>) {\n    super(args);\n    this.indexPicker = this.createIndexPicker();\n  }\n\n  /**\n   * @return {(tests: T[]) => number} A function that returns the index of the test result\n   *                                  that has been chosen by this mediator.\n   */\n  protected createIndexPicker(): (tests: (T | undefined)[]) => number {\n    switch (this.type) {\n      case 'min':\n        return (tests: (T | undefined)[]): number => tests.reduce((prev, curr, i) => {\n          const val: number = this.getOrDefault((<any> curr)[this.field], Number.POSITIVE_INFINITY);\n          return val !== null && (Number.isNaN(prev[0]) || prev[0] > val) ? [ val, i ] : prev;\n        }, [ Number.NaN, -1 ])[1];\n      case 'max':\n        return (tests: (T | undefined)[]): number => tests.reduce((prev, curr, i) => {\n          const val: number = this.getOrDefault((<any> curr)[this.field], Number.NEGATIVE_INFINITY);\n          return val !== null && (Number.isNaN(prev[0]) || prev[0] < val) ? [ val, i ] : prev;\n        }, [ Number.NaN, -1 ])[1];\n      default:\n        // eslint-disable-next-line ts/restrict-template-expressions\n        throw new Error(`No valid \"type\" value was given, must be either 'min' or 'max', but got: ${this.type}`);\n    }\n  }\n\n  protected getOrDefault(value: number | undefined, defaultValue: number): number {\n    // eslint-disable-next-line ts/prefer-nullish-coalescing\n    return value === undefined ? defaultValue : value;\n  }\n\n  protected async mediateWith(action: I, testResults: IActorReply<A, I, T, O, TS>[]): Promise<TestResult<A, TS>> {\n    let wrappedResults = await Promise.all(testResults.map(({ reply }) => reply));\n\n    // Collect failures if we want to ignore them\n    const failures: string[] = [];\n    if (this.ignoreFailures) {\n      const dummy: any = {};\n      dummy[this.field] = null;\n      wrappedResults = wrappedResults.map((result) => {\n        if (result.isFailed()) {\n          failures.push(result.getFailMessage());\n          return passTestWithSideData<T, TS>(dummy, undefined!);\n        }\n        return result;\n      });\n    }\n\n    // Resolve values\n    const sideDatas: (TS | undefined)[] = [];\n    const results = wrappedResults.map((result, i) => {\n      const value = result.getOrThrow();\n      sideDatas[i] = result.getSideData();\n      return value;\n    });\n\n    // Determine one value\n    const index = this.indexPicker(results);\n    if (index < 0) {\n      return failTest(this.constructFailureMessage(action, failures));\n    }\n    return passTestWithSideData(testResults[index].actor, sideDatas[index]!);\n  }\n}\n\nexport interface IMediatorNumberArgs<\n  A extends Actor<I, T, O, TS>,\nI extends IAction,\nT extends IActorTest,\nO extends IActorOutput,\nTS,\n>\n  extends IMediatorArgs<A, I, T, O, TS> {\n  /**\n   * The field name of the test result field over which must be mediated.\n   */\n  field: string;\n  /**\n   * The way how the index should be selected.\n   * For choosing the minimum value: 'min'.\n   * For choosing the maximum value: 'max'.\n   */\n  type: 'min' | 'max';\n\n  /**\n   * If actors that throw fail tests should be ignored\n   */\n  ignoreFailures?: boolean;\n}\n"]}