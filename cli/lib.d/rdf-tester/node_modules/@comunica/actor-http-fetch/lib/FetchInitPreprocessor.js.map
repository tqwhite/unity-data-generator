{"version":3,"file":"FetchInitPreprocessor.js","sourceRoot":"","sources":["FetchInitPreprocessor.ts"],"names":[],"mappings":";;;AAAA,6CAA6C;AAC7C,yCAA+C;AAC/C,2CAAiD;AAKjD;;GAEG;AACH,MAAa,qBAAqB;IAGhC,YAAmB,YAAiB;QAClC,MAAM,SAAS,GAAG,IAAI,iBAAS,CAAC,YAAY,CAAC,CAAC;QAC9C,MAAM,UAAU,GAAG,IAAI,kBAAU,CAAC,YAAY,CAAC,CAAC;QAChD,IAAI,CAAC,KAAK,GAAG,CAAC,UAAe,EAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC;IACxG,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,IAAiB;QACnC,gCAAgC;QAChC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC;YACpC,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;YAClD,IAAI,GAAG,EAAE,GAAG,IAAI,EAAE,OAAO,EAAE,CAAC;QAC9B,CAAC;QAED,+EAA+E;QAC/E,gCAAgC;QAChC,mCAAmC;QACnC,OAAO;YACL,GAAG,IAAI;YACP,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE;YACzE,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;IACJ,CAAC;CACF;AA1BD,sDA0BC","sourcesContent":["/* eslint-disable import/no-nodejs-modules */\nimport { Agent as HttpAgent } from 'node:http';\nimport { Agent as HttpsAgent } from 'node:https';\n\n/* eslint-enable import/no-nodejs-modules */\nimport type { IFetchInitPreprocessor } from './IFetchInitPreprocessor';\n\n/**\n * Overrides the HTTP agent to perform better in Node.js.\n */\nexport class FetchInitPreprocessor implements IFetchInitPreprocessor {\n  private readonly agent: (url: URL) => HttpAgent;\n\n  public constructor(agentOptions: any) {\n    const httpAgent = new HttpAgent(agentOptions);\n    const httpsAgent = new HttpsAgent(agentOptions);\n    this.agent = (_parsedURL: URL): HttpAgent => _parsedURL.protocol === 'http:' ? httpAgent : httpsAgent;\n  }\n\n  public async handle(init: RequestInit): Promise<RequestInit & { agent: (url: URL) => HttpAgent }> {\n    // Add 'Accept-Encoding' headers\n    const headers = new Headers(init.headers);\n    if (!headers.has('Accept-Encoding')) {\n      headers.set('Accept-Encoding', 'br,gzip,deflate');\n      init = { ...init, headers };\n    }\n\n    // The Fetch API requires specific options to be set when sending body streams:\n    // - 'keepalive' can not be true\n    // - 'duplex' must be set to 'half'\n    return {\n      ...init,\n      ...init.body ? { keepalive: false, duplex: 'half' } : { keepalive: true },\n      agent: this.agent,\n    };\n  }\n}\n"]}