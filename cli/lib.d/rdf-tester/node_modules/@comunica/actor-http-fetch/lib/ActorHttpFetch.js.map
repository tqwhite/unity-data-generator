{"version":3,"file":"ActorHttpFetch.js","sourceRoot":"","sources":["ActorHttpFetch.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionHttp, IActorHttpOutput, IActorHttpArgs } from '@comunica/bus-http';\nimport { ActorHttp } from '@comunica/bus-http';\nimport { KeysHttp } from '@comunica/context-entries';\nimport type { TestResult } from '@comunica/core';\nimport { passTest } from '@comunica/core';\nimport type { IMediatorTypeTime } from '@comunica/mediatortype-time';\n\n// eslint-disable-next-line import/extensions\nimport { version as actorVersion } from '../package.json';\n\nimport { FetchInitPreprocessor } from './FetchInitPreprocessor';\nimport type { IFetchInitPreprocessor } from './IFetchInitPreprocessor';\n\nexport class ActorHttpFetch extends ActorHttp {\n  private readonly fetchInitPreprocessor: IFetchInitPreprocessor;\n\n  private static readonly userAgent = ActorHttp.createUserAgent('ActorHttpFetch', actorVersion);\n\n  public constructor(args: IActorHttpFetchArgs) {\n    super(args);\n    this.fetchInitPreprocessor = new FetchInitPreprocessor(args.agentOptions);\n  }\n\n  public async test(_action: IActionHttp): Promise<TestResult<IMediatorTypeTime>> {\n    return passTest({ time: Number.POSITIVE_INFINITY });\n  }\n\n  public async run(action: IActionHttp): Promise<IActorHttpOutput> {\n    const headers = this.prepareRequestHeaders(action);\n\n    const init: RequestInit = { method: 'GET', ...action.init, headers };\n\n    this.logInfo(action.context, `Requesting ${ActorHttp.getInputUrl(action.input).href}`, () => ({\n      headers: ActorHttp.headersToHash(headers),\n      method: init.method,\n    }));\n\n    // TODO: remove this workaround once this has a fix: https://github.com/inrupt/solid-client-authn-js/issues/1708\n    if (action.context.has(KeysHttp.fetch)) {\n      init.headers = ActorHttp.headersToHash(headers);\n    }\n\n    if (action.context.get(KeysHttp.includeCredentials)) {\n      init.credentials = 'include';\n    }\n\n    const httpTimeout = action.context.get(KeysHttp.httpTimeout);\n    const httpBodyTimeout = action.context.get(KeysHttp.httpBodyTimeout);\n    const fetchFunction = action.context.get(KeysHttp.fetch) ?? fetch;\n    const requestInit = await this.fetchInitPreprocessor.handle(init);\n\n    let timeoutCallback: () => void;\n    let timeoutHandle: NodeJS.Timeout | undefined;\n\n    if (httpTimeout) {\n      const abortController = new AbortController();\n      requestInit.signal = abortController.signal;\n      timeoutCallback = () => abortController.abort(new Error(`Fetch timed out for ${ActorHttp.getInputUrl(action.input).href} after ${httpTimeout} ms`));\n      timeoutHandle = setTimeout(() => timeoutCallback(), httpTimeout);\n    }\n\n    const response = await fetchFunction(action.input, requestInit);\n\n    if (httpTimeout && (!httpBodyTimeout || !response.body)) {\n      clearTimeout(timeoutHandle);\n    }\n\n    return response;\n  }\n\n  /**\n   * Prepares the request headers, taking into account the environment.\n   * @param {IActionHttp} action The HTTP action\n   * @returns {Headers} Headers\n   */\n  public prepareRequestHeaders(action: IActionHttp): Headers {\n    const headers = new Headers(action.init?.headers);\n\n    if (ActorHttp.isBrowser()) {\n      // When running in a browser, the User-Agent header should never be set\n      headers.delete('user-agent');\n    } else if (!headers.has('user-agent')) {\n      // Otherwise, if no header value is provided, use the actor one\n      headers.set('user-agent', ActorHttpFetch.userAgent!);\n    }\n\n    const authString = action.context.get(KeysHttp.auth);\n    if (authString) {\n      headers.set('Authorization', `Basic ${ActorHttpFetch.stringToBase64(authString)}`);\n    }\n\n    return headers;\n  }\n\n  /**\n   * Converts a string, including ones with Unicode symbols, to Base64 encoding.\n   * This function was adapted from the MDN example function here:\n   * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\n   * @param {string} value The string value to encode\n   * @returns {string} The Base64-encoded value\n   */\n  public static stringToBase64(value: string): string {\n    const bytes = new TextEncoder().encode(value);\n    const binString = Array.from(bytes, byte => String.fromCodePoint(byte)).join('');\n    return btoa(binString);\n  }\n}\n\nexport interface IActorHttpFetchArgs extends IActorHttpArgs {\n  /**\n   * The agent options for the HTTP agent\n   * @range {json}\n   * @default {{ \"keepAlive\": true, \"maxSockets\": 5 }}\n   */\n  agentOptions?: Record<string, any>;\n}\n"]}