{"version":3,"file":"ActorRdfParseHtml.js","sourceRoot":"","sources":["ActorRdfParseHtml.ts"],"names":[],"mappings":";;;AACA,yCAAuC;AAGvC;;;;;;;;;;GAUG;AACH,MAAsB,iBACpB,SAAQ,YAAoE;IAC5E,4BAA4B;IAC5B;;;;OAIG;IACH,2BAA2B;IAC3B,YAAmB,IAAgC;QACjD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AAZD,8CAYC","sourcesContent":["import type { IAction, IActorArgs, IActorOutput, IActorTest, Mediate } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type * as RDF from '@rdfjs/types';\n\n/**\n * A comunica actor for rdf-parse-html events.\n *\n * Actor types:\n * * Input:  IActionRdfParseHtml:      Callbacks for parsing results.\n * * Test:   <none>\n * * Output: IActorRdfParseHtmlOutput: An HTML event listeners.\n *\n * @see IActionRdfParseHtml\n * @see IActorRdfParseHtmlOutput\n */\nexport abstract class ActorRdfParseHtml<TS = undefined>\n  extends Actor<IActionRdfParseHtml, IActorTest, IActorRdfParseHtmlOutput, TS> {\n  /* eslint-disable max-len */\n  /**\n   * @param args -\n   *   \\ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   *   \\ @defaultNested {RDF HTML parsing failed: none of the configured parsers were able to parse RDF in HTML} busFailMessage\n   */\n  /* eslint-enable max-len */\n  public constructor(args: IActorRdfParseHtmlArgs<TS>) {\n    super(args);\n  }\n}\n\nexport interface IActionRdfParseHtml extends IAction {\n  /**\n   * The base IRI.\n   */\n  baseIRI: string;\n  /**\n   * The headers with which the RDF document should be parsed.\n   */\n  headers?: Headers;\n\n  /**\n   * This function can be called whenever a quad has been parsed.\n   * @param {Quad} quad A parsed quad.\n   */\n  emit: (quad: RDF.Quad) => void;\n\n  /**\n   * This function can be called when an error occurs.\n   * @param {Error} error An error.\n   */\n  error: (error: Error) => void;\n\n  /**\n   * This function must be called when parsing is complete.\n   */\n  end: () => void;\n}\n\nexport interface IActorRdfParseHtmlOutput extends IActorOutput {\n  /**\n   * A listener for HTML parse events.\n   */\n  htmlParseListener: IHtmlParseListener;\n}\n\n/**\n * An HTML parsing listener.\n */\nexport interface IHtmlParseListener {\n  /**\n   * Called when a tag is opened.\n   * @param {string} name The tag name.\n   * @param {{[p: string]: string}} attributes A hash of attributes.\n   */\n  onTagOpen: (name: string, attributes: Record<string, string>) => void;\n\n  /**\n   * Called when a tag is closed.\n   */\n  onTagClose: () => void;\n\n  /**\n   * Called when text contents are parsed.\n   * Note that this can be called multiple times per tag,\n   * when for example the string is spread over multiple chunks.\n   * @param {string} data A string.\n   */\n  onText: (data: string) => void;\n\n  /**\n   * Called when parsing has ended.\n   */\n  onEnd: () => void;\n}\n\nexport type IActorRdfParseHtmlArgs<TS = undefined> =\n  IActorArgs<IActionRdfParseHtml, IActorTest, IActorRdfParseHtmlOutput, TS>;\n\nexport type MediatorRdfParseHtml = Mediate<IActionRdfParseHtml, IActorRdfParseHtmlOutput>;\n"]}