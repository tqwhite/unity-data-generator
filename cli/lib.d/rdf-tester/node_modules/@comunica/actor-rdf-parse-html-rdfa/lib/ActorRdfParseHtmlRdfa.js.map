{"version":3,"file":"ActorRdfParseHtmlRdfa.js","sourceRoot":"","sources":["ActorRdfParseHtmlRdfa.ts"],"names":[],"mappings":";;;AAKA,qEAAiE;AACjE,+DAA0D;AAE1D,yCAA8C;AAE9C,iEAAmD;AAEnD;;GAEG;AACH,MAAa,qBAAsB,SAAQ,sCAAiB;IAC1D,YAAmB,IAA4B;QAC7C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAA4B;QAC5C,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA2B;QAC1C,MAAM,WAAW,GAAwB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QAC3F,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC7E,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,SAAS,CAAC;QACzF,MAAM,OAAO,GAAG,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;QAE1E,MAAM,iBAAiB,GAAG,IAAI,kCAAU,CAAC,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;QACtG,iBAAiB,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5C,iBAAiB,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1C,6CAA6C;QAC7C,MAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC;QAC5C,iBAAiB,CAAC,KAAK,GAAG,GAAG,EAAE;YAC7B,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACpC,MAAM,CAAC,GAAG,EAAE,CAAC;QACf,CAAC,CAAC;QACF,OAAO,EAAE,iBAAiB,EAAE,CAAC;IAC/B,CAAC;CACF;AA1BD,sDA0BC","sourcesContent":["import type {\n  IActionRdfParseHtml,\n  IActorRdfParseHtmlOutput,\n  IActorRdfParseHtmlArgs,\n} from '@comunica/bus-rdf-parse-html';\nimport { ActorRdfParseHtml } from '@comunica/bus-rdf-parse-html';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { ComunicaDataFactory } from '@comunica/types';\nimport { RdfaParser } from 'rdfa-streaming-parser';\n\n/**\n * A comunica RDFa RDF Parse Html Actor.\n */\nexport class ActorRdfParseHtmlRdfa extends ActorRdfParseHtml {\n  public constructor(args: IActorRdfParseHtmlArgs) {\n    super(args);\n  }\n\n  public async test(_action: IActionRdfParseHtml): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async run(action: IActionRdfParseHtml): Promise<IActorRdfParseHtmlOutput> {\n    const dataFactory: ComunicaDataFactory = action.context.getSafe(KeysInitQuery.dataFactory);\n    const mediaType = action.headers ? action.headers.get('content-type') : null;\n    const language = (action.headers && action.headers.get('content-language')) ?? undefined;\n    const profile = mediaType && mediaType.includes('xml') ? 'xhtml' : 'html';\n\n    const htmlParseListener = new RdfaParser({ dataFactory, baseIRI: action.baseIRI, profile, language });\n    htmlParseListener.on('error', action.error);\n    htmlParseListener.on('data', action.emit);\n    // eslint-disable-next-line ts/unbound-method\n    const onTagEndOld = htmlParseListener.onEnd;\n    htmlParseListener.onEnd = () => {\n      onTagEndOld.call(htmlParseListener);\n      action.end();\n    };\n    return { htmlParseListener };\n  }\n}\n"]}