{"version":3,"file":"Keys.js","sourceRoot":"","sources":["Keys.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionContextKey, CONTEXT_KEY_LOGGER } from '@comunica/core';\nimport type {\n  AsyncExtensionFunctionCreator,\n  Bindings,\n  FunctionArgumentsCache,\n  IActionContext,\n  IAggregatedStore,\n  ICliArgsHandler,\n  IDataDestination,\n  IPhysicalQueryPlanLogger,\n  IProxyHandler,\n  IQuerySourceWrapper,\n  ISuperTypeProvider,\n  ITimeZoneRepresentation,\n  MetadataBindings,\n  QueryExplainMode,\n  QuerySourceReference,\n  QuerySourceUnidentified,\n  ComunicaDataFactory,\n  IStatisticBase,\n  IDiscoverEventData,\n  PartialResult,\n  ILink,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { IDocumentLoader } from 'jsonld-context-parser';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * When adding entries to this file, also add a shortcut for them in the contextKeyShortcuts TSDoc comment in\n * ActorInitQueryBase in @comunica/actor-init-query if it makes sense to use this entry externally.\n * Also, add this shortcut to IQueryContextCommon in @comunica/types.\n */\n\nexport const KeysCore = {\n  // We create the core context keys in @comunica/core to avoid a cyclic dependency\n  /**\n   * A logger instance.\n   */\n  log: CONTEXT_KEY_LOGGER,\n};\n\nexport const KeysHttp = {\n  /**\n   * Include credentials flags.\n   */\n  includeCredentials: new ActionContextKey<boolean>('@comunica/bus-http:include-credentials'),\n  /**\n   * Authentication for a source as a \"username:password\"-pair.\n   */\n  auth: new ActionContextKey<string>('@comunica/bus-http:auth'),\n  /**\n   * Fetch function implementation.\n   */\n  fetch: new ActionContextKey<typeof fetch>('@comunica/bus-http:fetch'),\n  /**\n   * HTTP request timeout in milliseconds.\n   */\n  httpTimeout: new ActionContextKey<number>('@comunica/bus-http:http-timeout'),\n  /**\n   * Makes the HTTP timeout not only apply until the response starts streaming in\n   * but until the response is fully consumed.\n   */\n  httpBodyTimeout: new ActionContextKey<boolean>('@comunica/bus-http:http-body-timeout'),\n  /**\n   * Number of retries to make on failed network calls. This only takes effect\n   * on errors thrown during the initial fetch() call and not while streaming the body.\n   */\n  httpRetryCount: new ActionContextKey<number>('@comunica/bus-http:http-retry-count'),\n  /**\n   * The fallback retry delay in milliseconds. This value is used when a server does not\n   * send a delay value in the Retry-After header or if the header value is incorrectly formatted.\n   */\n  httpRetryDelayFallback: new ActionContextKey<number>('@comunica/bus-http:http-retry-delay-fallback'),\n  /**\n   * The upper limit for the retry delay in milliseconds. When a server requests a delay larger than this,\n   * the engine will consider it unavailable until the specified timestamp is close enough.\n   */\n  httpRetryDelayLimit: new ActionContextKey<number>('@comunica/bus-http:http-retry-delay-limit'),\n  /**\n   * HTTP status codes that should always trigger a retry, regardless of the default behaviour.\n   * This can be used to, for example, force retries on server-side errors in the 500 range.\n   */\n  httpRetryStatusCodes: new ActionContextKey<number[]>('@comunica/bus-http:http-retry-status-codes'),\n};\n\nexport const KeysHttpWayback = {\n  /**\n   * Use the WayBack machine to get the most recent representation of a file if a link is broken.\n   * @default false\n   */\n  recoverBrokenLinks: new ActionContextKey<boolean>('@comunica/bus-http:recover-broken-links'),\n};\n\nexport const KeysHttpMemento = {\n  /**\n   * The desired datetime for Memento datetime-negotiation.\n   */\n  datetime: new ActionContextKey<Date>('@comunica/actor-http-memento:datetime'),\n};\n\nexport const KeysHttpProxy = {\n  /**\n   * Interface.\n   */\n  httpProxyHandler: new ActionContextKey<IProxyHandler>('@comunica/actor-http-proxy:httpProxyHandler'),\n};\n\nexport const KeysInitQuery = {\n  /**\n   * The unidentified sources to query over.\n   */\n  querySourcesUnidentified: new ActionContextKey<QuerySourceUnidentified[]>(\n    '@comunica/actor-init-query:querySourcesUnidentified',\n  ),\n  /**\n   * Variables that have to be pre-bound to values in the query.\n   */\n  initialBindings: new ActionContextKey<RDF.Bindings>('@comunica/actor-init-query:initialBindings'),\n  /**\n   * The provided query's format.\n   * Defaults to { language: 'sparql', version: '1.1' }\n   */\n  queryFormat: new ActionContextKey<RDF.QueryFormat>('@comunica/actor-init-query:queryFormat'),\n  /**\n   * Which GraphQL bindings should be singularized.\n   */\n  graphqlSingularizeVariables: new ActionContextKey<any>('@comunica/actor-init-query:singularizeVariables'),\n  /**\n   * If HTTP and parsing failures are ignored.\n   */\n  lenient: new ActionContextKey<boolean>('@comunica/actor-init-query:lenient'),\n  /**\n   * The original query string.\n   */\n  queryString: new ActionContextKey<string>('@comunica/actor-init-query:queryString'),\n  /**\n   * The original parsed query.\n   */\n  query: new ActionContextKey<Algebra.Operation>('@comunica/actor-init-query:query'),\n  /**\n   * The query's base IRI.\n   */\n  baseIRI: new ActionContextKey<string>('@comunica/actor-init-query:baseIRI'),\n  /**\n   * Object to cache function argument overload resolutions.\n   * Defaults to an object that is reused across query executions.\n   */\n  functionArgumentsCache: new ActionContextKey<FunctionArgumentsCache>(\n    '@comunica/actor-init-query:functionArgumentsCache',\n  ),\n  /**\n   * A timestamp representing the current time.\n   * This is required for certain SPARQL operations such as NOW().\n   */\n  queryTimestamp: new ActionContextKey<Date>('@comunica/actor-init-query:queryTimestamp'),\n  /**\n   * A high resolution timestamp representing the time elapsed since Performance.timeOrigin`.\n   * It can be used to precisely measure durations from the start of query execution.\n   */\n  queryTimestampHighResolution: new ActionContextKey<DOMHighResTimeStamp>(\n    '@comunica/actor-init-query:queryTimestampHighResolution',\n  ),\n  /**\n   * @range {functionNamedNode: RDF.NamedNode) => ((args: RDF.Term[]) => Promise<RDF.Term>) | undefined}\n   * Extension function creator for a given function IRI.\n   * Returned value should be an async function implementation.\n   * Undefined may be returned if no implementation exists for the given function IRI.\n   *\n   * The dictionary-based extensionFunctions context entry may be used instead, but not simultaneously.\n   */\n  extensionFunctionCreator: new ActionContextKey<AsyncExtensionFunctionCreator>(\n    '@comunica/actor-init-query:extensionFunctionCreator',\n  ),\n  /**\n   * Dictionary of extension functions.\n   * Key is the IRI of the function, and value is the async function implementation.\n   *\n   * The callback-based extensionFunctionCreator context entry may be used instead, but not simultaneously.\n   */\n  extensionFunctions: new ActionContextKey<\n  Record<string, (args: RDF.Term[]) => Promise<RDF.Term>>\n    >('@comunica/actor-init-query:extensionFunctions'),\n  /**\n   * Enables manipulation of the CLI arguments and their processing.\n   */\n  cliArgsHandlers: new ActionContextKey<ICliArgsHandler[]>('@comunica/actor-init-query:cliArgsHandlers'),\n  /**\n   * Explain mode of the query. Can be 'parsed', 'logical', 'physical', or 'physical-json'.\n   */\n  explain: new ActionContextKey<QueryExplainMode>('@comunica/actor-init-query:explain'),\n  /**\n   * Logs the used physical operators\n   */\n  physicalQueryPlanLogger: new ActionContextKey<IPhysicalQueryPlanLogger>(\n    '@comunica/actor-init-query:physicalQueryPlanLogger',\n  ),\n  /**\n   * The current physical operator within the query plan.\n   *              This is used to pass parent-child relationships for invoking the query plan logger.\n   */\n  physicalQueryPlanNode: new ActionContextKey<any>('@comunica/actor-init-query:physicalQueryPlanNode'),\n  /**\n   * A JSON-LD context\n   */\n  jsonLdContext: new ActionContextKey<any>('@context'),\n  /**\n   * A boolean value denoting whether caching is disabled or not.\n   */\n  invalidateCache: new ActionContextKey<boolean>('@comunica/actor-init-query:invalidateCache'),\n  /**\n   * The data factory for creating terms and quads.\n   */\n  dataFactory: new ActionContextKey<ComunicaDataFactory>('@comunica/actor-init-query:dataFactory'),\n  /**\n   * A boolean value denoting whether results should be deduplicated or not.\n   */\n  distinctConstruct: new ActionContextKey<boolean>('@comunica/actor-init-query:distinctConstruct'),\n};\n\nexport const KeysExpressionEvaluator = {\n  extensionFunctionCreator: new ActionContextKey<AsyncExtensionFunctionCreator>(\n    '@comunica/utils-expression-evaluator:extensionFunctionCreator',\n  ),\n  superTypeProvider: new ActionContextKey<ISuperTypeProvider>('@comunica/utils-expression-evaluator:superTypeProvider'),\n  defaultTimeZone: new ActionContextKey<ITimeZoneRepresentation>(\n    '@comunica/utils-expression-evaluator:defaultTimeZone',\n  ),\n  actionContext: new ActionContextKey<IActionContext>('@comunica/utils-expression-evaluator:actionContext'),\n};\n\nexport const KeysQueryOperation = {\n  /**\n   * Context entry for the current query operation.\n   */\n  operation: new ActionContextKey<Algebra.Operation>('@comunica/bus-query-operation:operation'),\n  /**\n   * @type {any} The metadata from the left streams within a join operation.\n   */\n  joinLeftMetadata: new ActionContextKey<MetadataBindings>('@comunica/bus-query-operation:joinLeftMetadata'),\n  /**\n   * An array of metadata from the right streams within a join operation.\n   */\n  joinRightMetadatas: new ActionContextKey<MetadataBindings[]>('@comunica/bus-query-operation:joinRightMetadatas'),\n  /**\n   * Indicates the bindings that were used to bind the operation.\n   */\n  joinBindings: new ActionContextKey<Bindings>('@comunica/bus-query-operation:joinBindings'),\n  /**\n   * Flag for indicating that only read operations are allowed, defaults to false.\n   */\n  readOnly: new ActionContextKey<boolean>('@comunica/bus-query-operation:readOnly'),\n  /**\n   * An internal context entry to mark that a property path with arbitrary length and a distinct key is being processed.\n   */\n  isPathArbitraryLengthDistinctKey: new ActionContextKey<boolean>(\n    '@comunica/bus-query-operation:isPathArbitraryLengthDistinct',\n  ),\n  /**\n   * An indicator that the stream will be limited to the given number of elements afterwards.\n   */\n  limitIndicator: new ActionContextKey<number>('@comunica/bus-query-operation:limitIndicator'),\n  /**\n   * If the default graph should also contain the union of all named graphs.\n   */\n  unionDefaultGraph: new ActionContextKey<boolean>('@comunica/bus-query-operation:unionDefaultGraph'),\n  /**\n   * The sources to query over.\n   */\n  querySources: new ActionContextKey<IQuerySourceWrapper[]>('@comunica/bus-query-operation:querySources'),\n};\n\nexport const KeysRdfParseJsonLd = {\n  /**\n   * @range {IDocumentLoader}\n   */\n  documentLoader: new ActionContextKey<IDocumentLoader>('@comunica/actor-rdf-parse-jsonld:documentLoader'),\n  /**\n   * @range {boolean}\n   */\n  strictValues: new ActionContextKey<boolean>('@comunica/actor-rdf-parse-jsonld:strictValues'),\n  /**\n   * @range {Record<string, any>}\n   */\n  parserOptions: new ActionContextKey<Record<string, any>>('@comunica/actor-rdf-parse-jsonld:parserOptions'),\n};\n\nexport const KeysRdfParseHtmlScript = {\n  /**\n   * An internal context flag to determine if the engine is already processing an HTML script tag.\n   */\n  processingHtmlScript: new ActionContextKey<boolean>('@comunica/actor-rdf-parse-html-script:processingHtmlScript'),\n  /**\n   * If all HTML script tags must be considered.\n   */\n  extractAllScripts: new ActionContextKey<boolean>('extractAllScripts'),\n};\n\nexport const KeysQuerySourceIdentify = {\n  /**\n   * A map containing unique IDs for each source\n   */\n  sourceIds: new ActionContextKey<Map<QuerySourceReference, string>>(\n    '@comunica/bus-query-source-identify:sourceIds',\n  ),\n  /**\n   * Hypermedia sources mapping to their aggregated store.\n   */\n  hypermediaSourcesAggregatedStores: new ActionContextKey<Map<string, IAggregatedStore>>(\n    '@comunica/bus-query-source-identify:hypermediaSourcesAggregatedStores',\n  ),\n  /**\n   * If links may be traversed from this source.\n   * This means that sources annotated with this flag are considered incomplete until all links have been traversed.\n   */\n  traverse: new ActionContextKey<boolean>('@comunica/bus-query-source-identify:traverse'),\n};\n\nexport const KeysRdfUpdateQuads = {\n  /**\n   * A data destination.\n   */\n  destination: new ActionContextKey<IDataDestination>('@comunica/bus-rdf-update-quads:destination'),\n};\n\nexport const KeysMergeBindingsContext = {\n  /**\n   * The data sources required to produce the binding\n   */\n  sourcesBinding: new ActionContextKey<string[]>('@comunica/bus-merge-bindings-context:sourcesBinding'),\n};\n\nexport const KeysRdfJoin = {\n  /**\n   * The last physical join actor that was executed.\n   */\n  lastPhysicalJoin: new ActionContextKey<string>('@comunica/bus-rdf-join:lastPhysicalJoin'),\n};\n\nexport const KeysStatistics = {\n  /**\n   * All discovered links during query execution. Not all of them will necessarily be dereferenced.\n   */\n  discoveredLinks: new ActionContextKey<IStatisticBase<IDiscoverEventData>>(\n    '@comunica/statistic:discoveredLinks',\n  ),\n  /**\n   * Information about what links are dereferenced and when\n   */\n  dereferencedLinks: new ActionContextKey<IStatisticBase<ILink>>(\n    '@comunica/statistic:dereferencedLinks',\n  ),\n  /**\n   * Intermediate results produced during query execution\n   */\n  intermediateResults: new ActionContextKey<IStatisticBase<PartialResult>>(\n    '@comunica/statistic:intermediateResults',\n  ),\n};\n"]}