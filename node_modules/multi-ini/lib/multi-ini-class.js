'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var fs = require('fs');

var _ = require('lodash');

var Parser = require("./parser");

var Serializer = require("./serializer");

var Constants = require("./constants");

var defaults = {
  encoding: 'utf8',
  line_breaks: 'unix'
};

var MultiIni = /*#__PURE__*/function () {
  function MultiIni() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2["default"])(this, MultiIni);
    this.options = Object.assign({}, defaults, options);
    this.parser = new Parser(this.options);
    this.serializer = new Serializer(this.options);
  }

  (0, _createClass2["default"])(MultiIni, [{
    key: "read",
    value: function read(filename) {
      if (!filename) {
        throw new Error('Missing filename.');
      }

      var lines = this.fetchLines(filename);
      return this.parser.parse(lines);
    }
  }, {
    key: "fetchLines",
    value: function fetchLines(filename) {
      var content = fs.readFileSync(filename, this.options);
      return content.split(Constants.line_breaks[this.options.line_breaks]);
    }
  }, {
    key: "write",
    value: function write(filename) {
      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      fs.writeFileSync(filename, this.serializer.serialize(content), this.options);
      return;
    }
  }]);
  return MultiIni;
}();

module.exports = MultiIni;