#!/usr/bin/env node
'use strict';
// Suppress punycode deprecation warning
process.noDeprecation = true;

const moduleName = __filename.replace(__dirname + '/', '').replace(/.js$/, ''); //this just seems to come in handy a lot

//START OF moduleFunction() ============================================================
// DOTD MODULE WITH PARAMETERS AND SHARED FUNCTIONS
// =================================================
// This example shows how to:
// 1. Accept parameters in your module functions
// 2. Use shared functions from passThroughParameters
// 3. Combine local logic with shared utilities

const moduleFunction = ({ moduleName } = {}) => ({ dotD, passThroughParameters } = {}) => {

	// STEP 1: Define a function that accepts parameters
	// This demonstrates how module functions can receive arguments
	const workingFunction = (arg1, arg2) => {
		// USING SHARED FUNCTIONS: Call functions from passThroughParameters
		// In this example, 'add' was passed in from the main library setup
		const result = passThroughParameters.add(arg1, arg2);
		
		console.log(`Pass Through Function: ${arg1}+${arg2}=${result} [${moduleName}]`);
		
		// COMMON PATTERNS WITH PARAMETERS:
		// - Validation: if (!arg1 || !arg2) throw new Error('Missing arguments');
		// - Default values: arg1 = arg1 || defaultValue;
		// - Type checking: if (typeof arg1 !== 'number') return null;
		// - Using shared config: const timeout = passThroughParameters.config.timeout;
		// - Logging with shared logger: passThroughParameters.xLog(`Processing ${arg1}, ${arg2}`);
		
		return result; // Return meaningful data
	};
	
	// STEP 2: Register the function (same as demo1)
	dotD.library.add(moduleName, workingFunction);
	
	// ALTERNATIVE PATTERNS:
	// You could also add multiple functions from one module:
	// dotD.library.add(`${moduleName}Sync`, syncVersion);
	// dotD.library.add(`${moduleName}Async`, asyncVersion);
};

//END OF moduleFunction() ============================================================

module.exports = moduleFunction({ moduleName }); //runs it right now