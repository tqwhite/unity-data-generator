'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _ = require('lodash');

var Constants = require("./constants");

var defaults = {
  line_breaks: 'unix',
  keep_quotes: false
};

var Serializer = /*#__PURE__*/function () {
  function Serializer() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2["default"])(this, Serializer);
    this.options = Object.assign({}, defaults, options);
  }

  (0, _createClass2["default"])(Serializer, [{
    key: "needToBeQuoted",
    value: function needToBeQuoted(value) {
      if (this.options.keep_quotes) {
        return false;
      } // wrapped with qoutes


      if (value.match(/^"[\s\S]*?"$/g)) {
        return false;
      } // escaped quote at the end


      if (value.match(/^[\s\S]*?\\"$/g)) {
        return true;
      } // ends or starts with a quote


      if (value.match(/^[\s\S]*?"$/g) || value.match(/^"[\s\S]*?$/g)) {
        return false;
      }

      return true;
    }
  }, {
    key: "serialize",
    value: function serialize(content) {
      var _this = this;

      return _.reduce(content, function (output, sectionContent, section) {
        output += "[".concat(section, "]") + Constants.line_breaks[_this.options.line_breaks];
        output += _this.serializeContent(sectionContent, '');
        return output;
      }, '');
    }
  }, {
    key: "serializeContent",
    value: function serializeContent(content, path) {
      var _this2 = this;

      return _.reduce(content, function (serialized, subContent, key) {
        if (_.isArray(subContent)) {
          var _iterator = _createForOfIteratorHelper(subContent),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var value = _step.value;

              if (_this2.needToBeQuoted(value)) {
                value = "\"".concat(value, "\"");
              }

              serialized += "".concat(path).concat(path.length > 0 ? '.' : '').concat(key, "[]=").concat(value).concat(Constants.line_breaks[_this2.options.line_breaks]);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else if (_.isObject(subContent)) {
          serialized += _this2.serializeContent(subContent, "".concat(path).concat(path.length > 0 ? '.' : '').concat(key));
        } else {
          if (_.isString(subContent) && _this2.needToBeQuoted(subContent)) {
            subContent = "\"".concat(subContent, "\"");
          }

          serialized += "".concat(path).concat(path.length > 0 ? '.' : '').concat(key, "=").concat(subContent).concat(Constants.line_breaks[_this2.options.line_breaks]);
        }

        return serialized;
      }, '');
    }
  }]);
  return Serializer;
}();

module.exports = Serializer;